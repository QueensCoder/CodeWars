

"""Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.
print(move_zeros([1,2,0,1,0,1,0,3,0,1]), should give you >>> [1, 2, 1, 1, 3, 1, 0, 0, 0, 0])
print(move_zeros([0,1,None,2,False,1,0]), should give you >>> [1, None, 2, False, 1, 0, 0])
The pitfall of this kata is that Python calculates False as 0 (True is 1)
In order to stop your function from mixing False in with the zeros I used a very specfic if statement nested within another if statement.
If array[i] is 0 or 0.0 we go to the next condtion to see if the type of array[i] is an integer or a float. If array[i] is an int or float
then it is appened to to zeros list. If the type(array[i]) is not int or float it is added to the new list. 
For example:
If array[i] == 0 and type(array[i]) == bool then i is added to the new list instead of the zeros list because we want only the zeros and
no other value.
"""

def move_zeros(array):
    new = []
    zeros = []
       
    for i in range(len(array)):       #here I iterated through the array using len(array) this means iterate the entire length of the array
        if array[i] == 0 or array[i] == 0.0: # if i is 0 or 0.0 we go to the next if 
            if type(array[i]) == int or type(array[i]) == float: #False is evaluated as 0 or 0.0 so here we examine the type of array[i]
                zeros.append(array[i])
                
            else:
                new.append(array[i])
        else:
            new.append(array[i])
    return  new + zeros
    
    
 print move_zeros(array)
